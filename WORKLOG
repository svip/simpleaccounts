DESIGN 09/01 15:40
The implementation will be kept as simple as possible for the scope of the
assignment.  We will try to avoid anything but standard library wherever
possible.  The database will mainly be kept in memory with a JSON file serving
as storage between runs.

The structs of the database should allow us to almost serve the internal
representation straight through the API.

First I will implement the database, and exported functions to interact with the
database.  Since it should be very simple, it can be done quickly, and allow us
to build a test database structure for the purpose of testing.

Second then I will implement the business logic against the database, and create
exported functions for the purpose of the front facing API.

Third the API.  It will be REST-like, but have no public documentation.  The
documentation will be written in a README file.

09/01 16:00
I have not studied floats in Go enough, but to be on the save side.  Money
balance and transactions are stored as integers (with the decimal mark moved
two times to the right, e.g. 1.11 becomes 111), along with functions to display
it the proper 'human' way.

09/01 16:22
While GUIDs and the like would be a preferrable solution in a bigger system, so
one cannot predict the ID of an account, I am still chosing a simple
incrementing integer for the ID.  The ID for transactions are their time stamps,
which could also have problems if two transactions are created at exactly the
same time.  But we can mitigate this by simply adding a nano second.

09/01 17:51
Since transactions are tied to a single account, they obviously should be able
to be negative.  But a zero transaction (i.e. of 0.00) should not be allowed.
The transactions are not a place to simply take notes.  This logic should be in
the business, rather than the database.

09/01 18:24
Despite the standard testing library being a bit too verbose, I've decided to
stick with it, as my general principle of only using standard library, even
though third party libraries exist to make testing less verbose.

09/01 20:07
Slightlying irritatingly, Go considers an empty list to be nil.  So if the JSON
encoder encodes an empty list, it returns "null" rather than "[]".  While null
can be acceptable in an object, it is not on its own.  So all the calls returns
a JSON object.
